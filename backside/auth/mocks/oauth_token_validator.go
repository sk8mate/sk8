// Code generated by MockGen. DO NOT EDIT.
// Source: sk8.town/backside/auth (interfaces: OAuthTokenValidator)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	auth "sk8.town/backside/auth"
	errs "sk8.town/backside/errs"
)

// MockOAuthTokenValidator is a mock of OAuthTokenValidator interface
type MockOAuthTokenValidator struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthTokenValidatorMockRecorder
}

// MockOAuthTokenValidatorMockRecorder is the mock recorder for MockOAuthTokenValidator
type MockOAuthTokenValidatorMockRecorder struct {
	mock *MockOAuthTokenValidator
}

// NewMockOAuthTokenValidator creates a new mock instance
func NewMockOAuthTokenValidator(ctrl *gomock.Controller) *MockOAuthTokenValidator {
	mock := &MockOAuthTokenValidator{ctrl: ctrl}
	mock.recorder = &MockOAuthTokenValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOAuthTokenValidator) EXPECT() *MockOAuthTokenValidatorMockRecorder {
	return m.recorder
}

// Verify mocks base method
func (m *MockOAuthTokenValidator) Verify(arg0 string) (*auth.OAuthClientClaims, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0)
	ret0, _ := ret[0].(*auth.OAuthClientClaims)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Verify indicates an expected call of Verify
func (mr *MockOAuthTokenValidatorMockRecorder) Verify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockOAuthTokenValidator)(nil).Verify), arg0)
}
