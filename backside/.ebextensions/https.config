# Dont forget to set the env variable "DOMAIN_LINK" and either fill in your email below or set the env variable "EMAIL_LINK" for that too.

--- 
Resources: 
  sslSecurityGroupIngress: 
    Properties: 
      CidrIp: 0.0.0.0/0
      FromPort: 443
      GroupId: 
        ? "Fn::GetAtt"
        : 
          - AWSEBSecurityGroup
          - GroupId
      IpProtocol: tcp
      ToPort: 443
    Type: "AWS::EC2::SecurityGroupIngress"

files: 
  /etc/cron.d/certbot_renew: 
    content: "@weekly root certbot renew\n"
    group: root
    mode: "000644"
    owner: root

  /etc/nginx/nginx.conf:
    group: root
    owner: root
    mode: "000644"
    content: |
      #Elastic Beanstalk Nginx Configuration File

      user                    nginx;
      error_log               /var/log/nginx/error.log warn;
      pid                     /var/run/nginx.pid;
      worker_processes        auto;
      worker_rlimit_nofile    32137;

      events {
          worker_connections  1024;
      }

      http {
          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;

          log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                              '$status $body_bytes_sent "$http_referer" '
                              '"$http_user_agent" "$http_x_forwarded_for"';

          upstream backside {
              server 127.0.0.1:8080;
              keepalive 256;
          }

          # HTTP server
          server {
              listen 80 default_server;
              server_name localhost;
              access_log    /var/log/nginx/access.log main;
              return 301 https://$host$request_uri;

              # Include the Elastic Beanstalk generated locations
              include conf.d/elasticbeanstalk/he*.conf;

          }

          # HTTPS server
          server {
              listen       443 default ssl;
              server_name  localhost;
              error_page 497 https://$host$request_uri;

              if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
              set $year $1;
              set $month $2;
              set $day $3;
              set $hour $4;
              }

              access_log /var/log/nginx/healthd/application.log.$year-$month-$day-$hour main;
              
              ssl_certificate      /etc/letsencrypt/live/ebcert/fullchain.pem;
              ssl_certificate_key  /etc/letsencrypt/live/ebcert/privkey.pem;
              ssl_session_timeout  5m;
              ssl_protocols  TLSv1.1 TLSv1.2;
              ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
              ssl_prefer_server_ciphers   on;
              if ($ssl_protocol = "") {
              rewrite ^ https://$host$request_uri? permanent;
              }
              location ~ ^/(lib/|img/) {
              root /var/app/current/public;
              access_log off;
              }
              location / {
                  proxy_pass  http://backside;
                  proxy_set_header   Connection "";
                  proxy_http_version 1.1;
                  proxy_set_header        Host            $host;
                  proxy_set_header        X-Real-IP       $remote_addr;
                  proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header        Upgrade         $http_upgrade;
                  proxy_set_header        Connection      "Upgrade";
              }
          }


          map $http_upgrade $connection_upgrade {
              default     "upgrade";
          }
      }
  
container_commands:
  10_downloadepel: 
    command: "sudo wget -r --no-parent -A 'epel-release-*.rpm' https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/"
  20_installepel: 
    command: "sudo rpm -Uvh dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-*.rpm --force"
  30_enableepl: 
    command: "sudo yum-config-manager --enable epel*"
  40_installcertbot: 
    command: "sudo yum install -y certbot"
  50_getcert: 
    command: "sudo certbot certonly --debug --non-interactive --email ${EMAIL_LINK} --agree-tos --standalone --domains ${DOMAIN_LINK} --keep-until-expiring --pre-hook \"sudo service nginx stop\""
  60_link: 
    command: "ln -sf /etc/letsencrypt/live/${DOMAIN_LINK} /etc/letsencrypt/live/ebcert"
  70_start_nginx:
    command: "sudo service nginx start"
    