// Code generated by MockGen. DO NOT EDIT.
// Source: sk8.town/backside/spots (interfaces: FilterService)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	errs "sk8.town/backside/errs"
	dto "sk8.town/backside/spots/dto"
)

// MockFilterService is a mock of FilterService interface
type MockFilterService struct {
	ctrl     *gomock.Controller
	recorder *MockFilterServiceMockRecorder
}

// MockFilterServiceMockRecorder is the mock recorder for MockFilterService
type MockFilterServiceMockRecorder struct {
	mock *MockFilterService
}

// NewMockFilterService creates a new mock instance
func NewMockFilterService(ctrl *gomock.Controller) *MockFilterService {
	mock := &MockFilterService{ctrl: ctrl}
	mock.recorder = &MockFilterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilterService) EXPECT() *MockFilterServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockFilterService) GetAll() ([]*dto.FilterData, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*dto.FilterData)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockFilterServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockFilterService)(nil).GetAll))
}
