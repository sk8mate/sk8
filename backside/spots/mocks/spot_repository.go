// Code generated by MockGen. DO NOT EDIT.
// Source: sk8.town/backside/spots/domain (interfaces: SpotRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	errs "sk8.town/backside/errs"
	domain "sk8.town/backside/spots/domain"
)

// MockSpotRepository is a mock of SpotRepository interface
type MockSpotRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSpotRepositoryMockRecorder
}

// MockSpotRepositoryMockRecorder is the mock recorder for MockSpotRepository
type MockSpotRepositoryMockRecorder struct {
	mock *MockSpotRepository
}

// NewMockSpotRepository creates a new mock instance
func NewMockSpotRepository(ctrl *gomock.Controller) *MockSpotRepository {
	mock := &MockSpotRepository{ctrl: ctrl}
	mock.recorder = &MockSpotRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSpotRepository) EXPECT() *MockSpotRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockSpotRepository) Add(arg0 *domain.Spot) (*domain.Spot, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(*domain.Spot)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockSpotRepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSpotRepository)(nil).Add), arg0)
}

// Delete mocks base method
func (m *MockSpotRepository) Delete(arg0 int) (int, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockSpotRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSpotRepository)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockSpotRepository) Get(arg0 int) (*domain.Spot, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*domain.Spot)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSpotRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSpotRepository)(nil).Get), arg0)
}

// GetAll mocks base method
func (m *MockSpotRepository) GetAll() ([]*domain.Spot, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*domain.Spot)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockSpotRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSpotRepository)(nil).GetAll))
}

// Update mocks base method
func (m *MockSpotRepository) Update(arg0 int, arg1 *domain.Spot) (*domain.Spot, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*domain.Spot)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockSpotRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSpotRepository)(nil).Update), arg0, arg1)
}
