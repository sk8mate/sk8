// Code generated by MockGen. DO NOT EDIT.
// Source: sk8.town/backside/spots/domain (interfaces: SpotRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	errs "sk8.town/backside/errs"
	domain "sk8.town/backside/spots/domain"
)

// MockSpotRepository is a mock of SpotRepository interface.
type MockSpotRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSpotRepositoryMockRecorder
}

// MockSpotRepositoryMockRecorder is the mock recorder for MockSpotRepository.
type MockSpotRepositoryMockRecorder struct {
	mock *MockSpotRepository
}

// NewMockSpotRepository creates a new mock instance.
func NewMockSpotRepository(ctrl *gomock.Controller) *MockSpotRepository {
	mock := &MockSpotRepository{ctrl: ctrl}
	mock.recorder = &MockSpotRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpotRepository) EXPECT() *MockSpotRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSpotRepository) Add(arg0 domain.Spot) (*domain.Spot, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(*domain.Spot)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockSpotRepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSpotRepository)(nil).Add), arg0)
}
