// Code generated by MockGen. DO NOT EDIT.
// Source: sk8.town/backside/spots/domain (interfaces: FilterRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	errs "sk8.town/backside/errs"
	domain "sk8.town/backside/spots/domain"
)

// MockFilterRepository is a mock of FilterRepository interface
type MockFilterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFilterRepositoryMockRecorder
}

// MockFilterRepositoryMockRecorder is the mock recorder for MockFilterRepository
type MockFilterRepositoryMockRecorder struct {
	mock *MockFilterRepository
}

// NewMockFilterRepository creates a new mock instance
func NewMockFilterRepository(ctrl *gomock.Controller) *MockFilterRepository {
	mock := &MockFilterRepository{ctrl: ctrl}
	mock.recorder = &MockFilterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilterRepository) EXPECT() *MockFilterRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockFilterRepository) GetAll() ([]*domain.Filter, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*domain.Filter)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockFilterRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockFilterRepository)(nil).GetAll))
}
