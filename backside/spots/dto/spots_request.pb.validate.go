// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/spots_request.proto

package dto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on SpotsAddRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SpotsAddRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return SpotsAddRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetAddress()) < 1 {
		return SpotsAddRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetCoordinates() == nil {
		return SpotsAddRequestValidationError{
			field:  "Coordinates",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCoordinates()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpotsAddRequestValidationError{
				field:  "Coordinates",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Lighting

	// no validation rules for Friendly

	// no validation rules for Verified

	return nil
}

// SpotsAddRequestValidationError is the validation error returned by
// SpotsAddRequest.Validate if the designated constraints aren't met.
type SpotsAddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpotsAddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpotsAddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpotsAddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpotsAddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpotsAddRequestValidationError) ErrorName() string { return "SpotsAddRequestValidationError" }

// Error satisfies the builtin error interface
func (e SpotsAddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpotsAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpotsAddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpotsAddRequestValidationError{}

// Validate checks the field values on SpotsUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SpotsUpdateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Address

	if v, ok := interface{}(m.GetCoordinates()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpotsUpdateRequestValidationError{
				field:  "Coordinates",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Lighting

	// no validation rules for Friendly

	// no validation rules for Verified

	return nil
}

// SpotsUpdateRequestValidationError is the validation error returned by
// SpotsUpdateRequest.Validate if the designated constraints aren't met.
type SpotsUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpotsUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpotsUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpotsUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpotsUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpotsUpdateRequestValidationError) ErrorName() string {
	return "SpotsUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SpotsUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpotsUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpotsUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpotsUpdateRequestValidationError{}

// Validate checks the field values on SpotsAddRequest_Coordinates with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SpotsAddRequest_Coordinates) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetLat(); val < -90 || val > 90 {
		return SpotsAddRequest_CoordinatesValidationError{
			field:  "Lat",
			reason: "value must be inside range [-90, 90]",
		}
	}

	if val := m.GetLong(); val < -180 || val > 180 {
		return SpotsAddRequest_CoordinatesValidationError{
			field:  "Long",
			reason: "value must be inside range [-180, 180]",
		}
	}

	return nil
}

// SpotsAddRequest_CoordinatesValidationError is the validation error returned
// by SpotsAddRequest_Coordinates.Validate if the designated constraints
// aren't met.
type SpotsAddRequest_CoordinatesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpotsAddRequest_CoordinatesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpotsAddRequest_CoordinatesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpotsAddRequest_CoordinatesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpotsAddRequest_CoordinatesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpotsAddRequest_CoordinatesValidationError) ErrorName() string {
	return "SpotsAddRequest_CoordinatesValidationError"
}

// Error satisfies the builtin error interface
func (e SpotsAddRequest_CoordinatesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpotsAddRequest_Coordinates.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpotsAddRequest_CoordinatesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpotsAddRequest_CoordinatesValidationError{}

// Validate checks the field values on SpotsUpdateRequest_Coordinates with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SpotsUpdateRequest_Coordinates) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetLat(); val < -90 || val > 90 {
		return SpotsUpdateRequest_CoordinatesValidationError{
			field:  "Lat",
			reason: "value must be inside range [-90, 90]",
		}
	}

	if val := m.GetLong(); val < -180 || val > 180 {
		return SpotsUpdateRequest_CoordinatesValidationError{
			field:  "Long",
			reason: "value must be inside range [-180, 180]",
		}
	}

	return nil
}

// SpotsUpdateRequest_CoordinatesValidationError is the validation error
// returned by SpotsUpdateRequest_Coordinates.Validate if the designated
// constraints aren't met.
type SpotsUpdateRequest_CoordinatesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpotsUpdateRequest_CoordinatesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpotsUpdateRequest_CoordinatesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpotsUpdateRequest_CoordinatesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpotsUpdateRequest_CoordinatesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpotsUpdateRequest_CoordinatesValidationError) ErrorName() string {
	return "SpotsUpdateRequest_CoordinatesValidationError"
}

// Error satisfies the builtin error interface
func (e SpotsUpdateRequest_CoordinatesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpotsUpdateRequest_Coordinates.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpotsUpdateRequest_CoordinatesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpotsUpdateRequest_CoordinatesValidationError{}
